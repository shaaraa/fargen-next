// Generated by Xata Codegen 0.30.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "farcaster",
    columns: [
      { name: "generated_url", type: "string" },
      { name: "uid", type: "string", notNull: true, defaultValue: "111" },
      {
        name: "can_generate",
        type: "bool",
        notNull: true,
        defaultValue: "false",
      },
      { name: "tipped_amount", type: "int", notNull: true, defaultValue: "0" },
      { name: "user_name", type: "string" },
      { name: "generated_data", type: "json" },
      { name: "fid", type: "string", notNull: true, defaultValue: "0" },
    ],
  },
  {
    name: "Users",
    columns: [
      { name: "fid", type: "text", notNull: true, defaultValue: "1" },
      {
        name: "can_generate",
        type: "bool",
        notNull: true,
        defaultValue: "false",
      },
      { name: "tipped_amount", type: "int", notNull: true, defaultValue: "0" },
      { name: "user_name", type: "text" },
      { name: "no_of_gen", type: "int" },
      { name: "sub_type", type: "text", notNull: true, defaultValue: "free" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Farcaster = InferredTypes["farcaster"];
export type FarcasterRecord = Farcaster & XataRecord;

export type Users = InferredTypes["Users"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  farcaster: FarcasterRecord;
  Users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://shara-s-workspace-nb8bsm.us-east-1.xata.sh/db/fargen",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
